""" Init
set background=dark
"highlight clear
"let g:colors_name = "koehler"


call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Load file explorer on-demand
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Easily search for, substitute, and abbreviate multiple variants of a word
Plug 'tpope/vim-abolish'

" Ctrl-p
set rtp+=~/.dotfiles/fzf
Plug 'junegunn/fzf.vim'

Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-fugitive'

Plug 'kchmck/vim-coffee-script'

Plug 'nsf/gocode'
Plug 'leafgarland/typescript-vim'

" Add plugins to &runtimepath
call plug#end()

colorscheme inkpot

set shell=/bin/bash

filetype off
filetype plugin indent on

if exists("syntax_on")
	syntax reset
endif

set laststatus=2 " always show the statusline

" Set colors for the statusline
hi statusline ctermfg=red ctermbg=yellow
hi statuslinenc ctermfg=white ctermbg=blue

set encoding=utf8
set fileencoding=utf8 " this does not force opening existing files in utf8; use fileencondings for that
" Show fileencoding and bomb in the status line
if has("statusline")
	set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
endif

set foldmethod=syntax
set foldlevel=8

autocmd FileType coffee setlocal makeprg=make

" Automatically open, but do not go to (if there are errors) the quickfix /
" location list window, or close it when is has become empty.
"
" Note: Must allow nesting of autocmds to enable any customizations for quickfix
" buffers.
" Note: Normally, :cwindow jumps to the quickfix window if the command opens it
" (but not if it's already open). However, as part of the autocmd, this doesn't
" seem to happen.
"autocmd QuickFixCmdPost [^l]* nested cwindow
"autocmd QuickFixCmdPost    l* nested lwindow

set nocp
set mouse=n
let g:spchkmouse = 1
let g:spchkautonext = 1
let g:spchkdialect = "usa"

let g:Tex_CompileRule_pdf = 'pdflatex -interaction=nonstopmode $^'
let g:Tex_FormatDependency_pdf = 'pdf'
let g:Tex_MultipleCompileFormats = 'dvi,pdf'
let g:Tex_DefaultTargetFormat = 'pdf'

set tags=tags;
let g:ctags_statusline=1
let g:ctags_title=1
let generate_tags=1

filetype plugin on " required for ctags plugins

set t_Co=256 " 256 color terminal
set nocp
syntax on
set ruler
set showcmd
set wmnu
set ai
set si
set backspace=2
set ts=4
set sw=4
set hlsearch
set wildmode=longest,list
set incsearch

set ic " case insensitive
set nu " line numbers

highlight AlterTabs ctermbg=234
autocmd Syntax * syn match AlterTabs /\(^\t\(\t\t\)*\)\@<=\t/

highlight StartSpaces ctermbg=235
autocmd Syntax * syn match StartSpaces /\(^  \(    \)*\)\@<=  /

highlight EndSpaces ctermbg=52
autocmd Syntax * syn match EndSpaces /[\t ][\t ]*[^ \t]\@<=$/

highlight TabSpaceMix ctermbg=52
autocmd Syntax * syn match TabSpaceMix /^\(\t*\t \@=\|  *\t\@=\)/

au BufNewFile,BufRead *.jspp setf jspp
au BufNewFile,BufRead *.phppp setf phppp
au BufNewFile,BufRead *.csspp setf csspp

vmap <F12> :CoffeeCompile<CR>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Improve up/down movement on wrapped lines
nnoremap j gj
nnoremap k gk

map <F2> :NERDTreeToggle<CR>

let mapleader = "\<Space>"
nnoremap <Leader>w :w<CR>
" enter visual line mode:
nmap <Leader><Leader> V
" select text you just pasted
noremap gV `[v`]
" system clipboard copy/paste:
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P

" Open file selector
nnoremap <c-p> :FZF<CR>
nnoremap <Leader>o :FZF<CR>


" Insert mode completion
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" git status
noremap <F3> :GFiles?<CR>

" vim command history
noremap <F4> :History:<CR>

" rg command suffix, [options]
function Rg(term)
  return call('fzf#vim#grep', ['rg --no-heading --line-number --color always '.shellescape(a:term), 0])
endfunction
command! -bang -nargs=* Rg call Rg(<q-args>)
noremap <F5> :Rg<Space>

let g:go_fmt_command = "goimports"
